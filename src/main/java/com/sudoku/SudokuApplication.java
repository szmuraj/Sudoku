package com.sudoku;

import java.util.Arrays;

public class SudokuApplication {

    public static void main(String[] args) {
        startBracket();

    }

    public static void startBracket() {
        int[][] b = {
                {0, 7, 2, 9, 3, 1, 5, 6, 8},
                {0, 5, 0, 6, 0, 0, 0, 0, 0},
                {0, 3, 0, 2, 4, 5, 0, 0, 7},
                {1, 0, 3, 0, 0, 0, 6, 0, 5},
                {0, 4, 0, 0, 8, 0, 2, 0, 9},
                {0, 0, 0, 0, 0, 6, 0, 3, 4},
                {0, 9, 4, 0, 0, 2, 0, 5, 1},
                {0, 0, 0, 8, 0, 9, 4, 0, 3},
                {8, 1, 7, 3, 5, 4, 9, 0, 6}
        };


        int[][][] numX = {
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                },
                {
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                        {1, 2, 3, 4, 5, 6, 7, 8, 9}
                }
        };


        int sum = 0;

        while (sum != 405) {

            //nadawanie wartości obecnych
            for (int c = 0; c < 9; c++) {
                for (int l = 0; l < 9; l++) {
                    if (b[c][l] != 0) {
                        for (int i = 0; i < 9; i++) {
                            numX[c][l][i] = 0;
                            numX[c][l][b[c][l] - 1] = b[c][l];
                        }
                    }
                }
            }

            // ogranicza możliwości wg linijek
            for (int c = 0; c < 9; c++) {
                for (int l = 0; l < 9; l++) {
                    int s = b[c][l];
                    if (b[c][l] != 0) {
                        numX[0][l][b[c][l] - 1] = 0;
                        numX[1][l][b[c][l] - 1] = 0;
                        numX[2][l][b[c][l] - 1] = 0;
                        numX[3][l][b[c][l] - 1] = 0;
                        numX[4][l][b[c][l] - 1] = 0;
                        numX[5][l][b[c][l] - 1] = 0;
                        numX[6][l][b[c][l] - 1] = 0;
                        numX[7][l][b[c][l] - 1] = 0;
                        numX[8][l][b[c][l] - 1] = 0;
                        numX[c][l][b[c][l] - 1] = s;
                    }
                }
            }

            // ogranicza możliwości wg kolumn
            for (int c = 0; c < 9; c++) {
                for (int l = 0; l < 9; l++) {
                    int s = b[c][l];
                    if (b[c][l] != 0) {
                        numX[c][0][b[c][l] - 1] = 0;
                        numX[c][1][b[c][l] - 1] = 0;
                        numX[c][2][b[c][l] - 1] = 0;
                        numX[c][3][b[c][l] - 1] = 0;
                        numX[c][4][b[c][l] - 1] = 0;
                        numX[c][5][b[c][l] - 1] = 0;
                        numX[c][6][b[c][l] - 1] = 0;
                        numX[c][7][b[c][l] - 1] = 0;
                        numX[c][8][b[c][l] - 1] = 0;
                        numX[c][l][b[c][l] - 1] = s;
                    }
                }
            }

            //ograniczenie możliwości wg klatek
            for (int c = 0; c < 9; c++) {
                for (int l = 0; l < 9; l++) {
                    int s = b[c][l];
                    if (b[c][l] != 0) {
                        if (c < 3) {
                            if (l < 3) {
                                numX[0][0][b[c][l] - 1] = 0;
                                numX[1][0][b[c][l] - 1] = 0;
                                numX[2][0][b[c][l] - 1] = 0;
                                numX[0][1][b[c][l] - 1] = 0;
                                numX[1][1][b[c][l] - 1] = 0;
                                numX[2][1][b[c][l] - 1] = 0;
                                numX[0][2][b[c][l] - 1] = 0;
                                numX[1][2][b[c][l] - 1] = 0;
                                numX[2][2][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 2 && l < 6) {
                                numX[0][3][b[c][l] - 1] = 0;
                                numX[1][3][b[c][l] - 1] = 0;
                                numX[2][3][b[c][l] - 1] = 0;
                                numX[0][4][b[c][l] - 1] = 0;
                                numX[1][4][b[c][l] - 1] = 0;
                                numX[2][4][b[c][l] - 1] = 0;
                                numX[0][5][b[c][l] - 1] = 0;
                                numX[1][5][b[c][l] - 1] = 0;
                                numX[2][5][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 5) {
                                numX[0][6][b[c][l] - 1] = 0;
                                numX[1][6][b[c][l] - 1] = 0;
                                numX[2][6][b[c][l] - 1] = 0;
                                numX[0][7][b[c][l] - 1] = 0;
                                numX[1][7][b[c][l] - 1] = 0;
                                numX[2][7][b[c][l] - 1] = 0;
                                numX[0][8][b[c][l] - 1] = 0;
                                numX[1][8][b[c][l] - 1] = 0;
                                numX[2][8][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                        }
                        if (c > 2 && c < 6) {
                            if (l < 3) {
                                numX[3][0][b[c][l] - 1] = 0;
                                numX[4][0][b[c][l] - 1] = 0;
                                numX[5][0][b[c][l] - 1] = 0;
                                numX[3][1][b[c][l] - 1] = 0;
                                numX[4][1][b[c][l] - 1] = 0;
                                numX[5][1][b[c][l] - 1] = 0;
                                numX[3][2][b[c][l] - 1] = 0;
                                numX[4][2][b[c][l] - 1] = 0;
                                numX[5][2][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 2 && l < 6) {
                                numX[3][3][b[c][l] - 1] = 0;
                                numX[4][3][b[c][l] - 1] = 0;
                                numX[5][3][b[c][l] - 1] = 0;
                                numX[3][4][b[c][l] - 1] = 0;
                                numX[4][4][b[c][l] - 1] = 0;
                                numX[5][4][b[c][l] - 1] = 0;
                                numX[3][5][b[c][l] - 1] = 0;
                                numX[4][5][b[c][l] - 1] = 0;
                                numX[5][5][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 5) {
                                numX[3][6][b[c][l] - 1] = 0;
                                numX[4][6][b[c][l] - 1] = 0;
                                numX[5][6][b[c][l] - 1] = 0;
                                numX[3][7][b[c][l] - 1] = 0;
                                numX[4][7][b[c][l] - 1] = 0;
                                numX[5][7][b[c][l] - 1] = 0;
                                numX[3][8][b[c][l] - 1] = 0;
                                numX[4][8][b[c][l] - 1] = 0;
                                numX[5][8][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                        }
                        if (c > 5) {
                            if (l < 3) {
                                numX[6][0][b[c][l] - 1] = 0;
                                numX[7][0][b[c][l] - 1] = 0;
                                numX[8][0][b[c][l] - 1] = 0;
                                numX[6][1][b[c][l] - 1] = 0;
                                numX[7][1][b[c][l] - 1] = 0;
                                numX[8][1][b[c][l] - 1] = 0;
                                numX[6][2][b[c][l] - 1] = 0;
                                numX[7][2][b[c][l] - 1] = 0;
                                numX[8][2][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 2 && l < 6) {
                                numX[6][3][b[c][l] - 1] = 0;
                                numX[7][3][b[c][l] - 1] = 0;
                                numX[8][3][b[c][l] - 1] = 0;
                                numX[6][4][b[c][l] - 1] = 0;
                                numX[7][4][b[c][l] - 1] = 0;
                                numX[8][4][b[c][l] - 1] = 0;
                                numX[6][5][b[c][l] - 1] = 0;
                                numX[7][5][b[c][l] - 1] = 0;
                                numX[8][5][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                            if (l > 5) {
                                numX[6][6][b[c][l] - 1] = 0;
                                numX[7][6][b[c][l] - 1] = 0;
                                numX[8][6][b[c][l] - 1] = 0;
                                numX[6][7][b[c][l] - 1] = 0;
                                numX[7][7][b[c][l] - 1] = 0;
                                numX[8][7][b[c][l] - 1] = 0;
                                numX[6][8][b[c][l] - 1] = 0;
                                numX[7][8][b[c][l] - 1] = 0;
                                numX[8][8][b[c][l] - 1] = 0;
                                numX[c][l][b[c][l] - 1] = s;
                            }
                        }
                    }
                }
            }


            // gdy jest tylko 1 możliwość wstawia ją
            for (int c = 0; c < 9; c++) {
                for (int l = 0; l < 9; l++) {
                    if (b[c][l] == 0) {
                        if (Arrays.stream(numX[c][l]).filter(e -> e != 0).count() == 1) {
                            b[c][l] = Arrays.stream(numX[c][l]).sum();
                        }
                    }
                }
            }

            // poprawka dla sumy
            for (int i = 0; i < 9; i++) {
                sum += Arrays.stream(b[i]).sum();
            }


            String bracket = " ___________________________________________________________\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][0] + "  |  " + b[1][0] + "  |  " + b[2][0] + "  | |  " + b[3][0] + "  |  " + b[4][0] + "  |  " + b[5][0] + "  | |  " + b[6][0] + "  |  " + b[7][0] + "  |  " + b[8][0] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][1] + "  |  " + b[1][1] + "  |  " + b[2][1] + "  | |  " + b[3][1] + "  |  " + b[4][1] + "  |  " + b[5][1] + "  | |  " + b[6][1] + "  |  " + b[7][1] + "  |  " + b[8][1] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][2] + "  |  " + b[1][2] + "  |  " + b[2][2] + "  | |  " + b[3][2] + "  |  " + b[4][2] + "  |  " + b[5][2] + "  | |  " + b[6][2] + "  |  " + b[7][2] + "  |  " + b[8][2] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "___________________________________________________________\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][3] + "  |  " + b[1][3] + "  |  " + b[2][3] + "  | |  " + b[3][3] + "  |  " + b[4][3] + "  |  " + b[5][3] + "  | |  " + b[6][3] + "  |  " + b[7][3] + "  |  " + b[8][3] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][4] + "  |  " + b[1][4] + "  |  " + b[2][4] + "  | |  " + b[3][4] + "  |  " + b[4][4] + "  |  " + b[5][4] + "  | |  " + b[6][4] + "  |  " + b[7][4] + "  |  " + b[8][4] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][5] + "  |  " + b[1][5] + "  |  " + b[2][5] + "  | |  " + b[3][5] + "  |  " + b[4][5] + "  |  " + b[5][5] + "  | |  " + b[6][5] + "  |  " + b[7][5] + "  |  " + b[8][5] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "___________________________________________________________\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][6] + "  |  " + b[1][6] + "  |  " + b[2][6] + "  | |  " + b[3][6] + "  |  " + b[4][6] + "  |  " + b[5][6] + "  | |  " + b[6][6] + "  |  " + b[7][6] + "  |  " + b[8][6] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][7] + "  |  " + b[1][7] + "  |  " + b[2][7] + "  | |  " + b[3][7] + "  |  " + b[4][7] + "  |  " + b[5][7] + "  | |  " + b[6][7] + "  |  " + b[7][7] + "  |  " + b[8][7] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____|\n " +
                    "|     |     |     | |     |     |     | |     |     |     |\n " +
                    "|  " + b[0][8] + "  |  " + b[1][8] + "  |  " + b[2][8] + "  | |  " + b[3][8] + "  |  " + b[4][8] + "  |  " + b[5][8] + "  | |  " + b[6][8] + "  |  " + b[7][8] + "  |  " + b[8][8] + "  |\n " +
                    "|_____|_____|_____| |_____|_____|_____| |_____|_____|_____| ";

            System.out.println(sum);
            System.out.println(bracket);
            if (sum != 405) {
                sum = 0;
            } else {
                System.out.println("Sudoku !!!!");
            }
        }
    }

}
